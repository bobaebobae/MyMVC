01begin
===================================================

	chap01
	-------------------------------------------------------------
	
		■ 01oneToTenSUm.jsp : 이 파일은 확장자.java/컴파일하면 .class 파일로 저장됨.
			- <!-- html 주석문 --> <%-- jsp 주석문 --%>
			- <% %> : 스크립플립(scriptlet) : 자바코딩 들어옴 -> 웹브라우저에서 소스보기를 해도 안보여져 보안성 좋음 (위치 노상관)
			- <%= %> : 표현식(expression) : "스크립틀릿에서 작성된 결과값"을 웹브라우저상에 보여주고자 할 때 사용하는 것
			- 파일 수정했는데 안먹을 경우 : .java와 .class 파일 삭제하고 다시 저장 후 was로 실행시키면 잘됨.
		
		■ 02dateTime.jsp
			- <%@ page %> : 필요한 클래스 import할 때  page directive(페이지 지시어) 사용하여 import 함.	
			- 	날짜 타입 format         설명
			  --------------------------------------------------
		       	%tF              날짜를 yyyy-mm-dd 형식으로 포맷해주는 것
				%tT              날짜의 시각을 HH:MM:SS 형식으로 포맷해주는 것  
		       	%tp              오전, 오후를 출력
				%tA              요일명 출력
				%tY              4자리 년도만 출력
		       	%tB              월의 이름(January, February ...)출력
				%tm              월의 01,02,03 ~~ 10,11,12 로 출력
				%td              일수를 1~31 로 출력
				%te              %td와 동일함
				%tk              시간을 0~23 으로 출력
		       	%tl              시간을 1~12 으로 출력
				%tM              분을 00~59 으로 출력
		       	%tS              초를 00~59 으로 출력
				%tZ              타임존을 출력(한국은 KST로 나옴).
			- 현재시각 : Date now = new Date(); 
			- 날짜형태 지정 : 	SimpleDateFormat sdfrmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); 
							String result = sdfrmt.format(now);
		   		또는			String currentTime = String.format("%tF %tT %tA",now,now,now);
			   				
		■ 03dateTime.jsp
			- 	<!DOCTYPE html>
				<html>
				<head> : contentType은 text/html인데 (반드시 필요) html 코드 없이 가능.
						 Q. 반드시 html코드가 필요합니까? => A.No.
		
		■ 04todayMenu.jsp
			- <%@ include file="파일명" %> : 파일을 불러와서 파일의 결과값을 끼워 넣는다.	
			
		
	chap02
	-------------------------------------------------------------	
		■ 01getMethodTest.jsp	: get
		<form name="memberFrm" action="<%= ctxPath%>/postMethodTest2.do" method="get">
			- String ctxPath = request.getContextPath(); : 컨텍스트명(context name)을 알려고 할 때  <- ctxPath는 /MyMVC로 나옴.
			- submit을 하면 action의 <%= ctxPath%>/getMethodTest1.do로 보내어서 처리 요청. -> 누가 처리하는지? 배치서술자 web.xml에 서블릿클래스가 기술되어져 있어야 함.
			- method="get"
		♣ GetMethodTest1
			- ** 서블릿 클래스를 작성할 때 지켜야할 규칙 3가지 
				1) 서블릿(Servlet) 클래스는 반드시 javax.servlet.http.HttpServlet 클래스를 부모 클래스로 상속을 받아야 한다.
			   	2) 웹클라이언트의 요청 방식이 GET 방식으로 요청을 해오면 doGet() 메소드로 응답을 해주도록 코딩을 해야 하고,
				     웹클라이언트의 요청 방식이 POST 방식으로 요청을 해오면 doPost() 메소드로 응답을 해주도록 코딩을 해주어야 한다.
				     그러므로 반드시 doGet() 메소드와 doPost() 메소드를  Overriding(재정의)를 해주어야 한다.
				       
				   doGet()메소드와 doPost()메소드의 
				     	첫번째 파라미터는 HttpServletRequest 타입이고,
				     	두번째 파라미터는 HttpServletResponse 타입이다.    
		
			   	3) 응답처리 결과인 HTML 문서는 doGet() 메소드, doPost() 메소드 모두 
			             두번째 파라미터를 이용해서 출력해야 한다.
       		- HttpServletRequest request : 전송되어져 온 데이터를 처리해주는 용도로 쓰임.
			- 콘솔 출력 -> sysout으로 나타내기
			- 웹브라우저로 출력 -> response.setContentType
				- response.setContentType("text/html; charset=UTF-8"); : 이거없으면 한글 깨져서 나옴			
				-	%d -->decimal 정수
			    	%f --> float 실수
			    	%s --> string 문자열
			- throws IOException : 호출하는 쪽(WAS/웹컨테이너/톰캣)에서 exception 처리를 하겠다는 뜻!  대부분 이렇게 씀. 개발자가 굳이 할 필요 없음.  /기본적으로 항상 붙여줌.   	
			 
		■ 02postMethodTest.jsp	: post
			<form name="memberFrm" action="<%= ctxPath%>/postMethodTest2.do" method="post">
			- 컨텍스트명(context name)을 알아 올 때 : String ctxPath = request.getContextPath(); <- ctxPath는 /MyMVC
		♣ PostMethodTest2
			- ** === Servlet : 웹서비스 기능을 해주는 자바 클래스 ===
				1. javax.servlet.http.HttpServlet클래스를 상속 
			    2. 웹클라이언트의 요청방식(GET/POST/…)에 알맞는 메소드(doGet()/doPost()/…)를 오버라이드함
				      doGet() 메소드와 doPost() 메소드의 
				              첫번째 파라미터는 HttpServletRequest 타입이고,
				              두번째 파라미터는 HttpServletResponse 타입이다. 
			    3. 만약에  서블릿(Servlet)에서 결과물을 웹브라우저상에 출력하고자 한다라면 doGet() 메소드와 doPost() 메소드 모두 
			           서블릿(Servlet)의 두번째 파라미터인 HttpServletResponse response를  사용하여 출력해준다.	    	
			- throws IOException : 호출하는 쪽(WAS/웹컨테이너/톰캣)에서 exception 처리를 하겠다는 뜻!  대부분 이렇게 씀. 개발자가 굳이 할 필요 없음.  /기본적으로 항상 붙여줌.  	
			- 웹의 기본타입은 항상 String    	
			- 한글 안 깨질라면 : response.setContentType("text/html; charset=UTF-8");    	
				- post 방식으로 넘어온 데이터중 영어는 글자가 안깨지지만, 한글은 글자모양이 깨져나온다.
				   그래서  post 방식에서 넘어온 한글 데이터가 글자가 안깨지게 하려면 
			          아래처럼 request.setCharacterEncoding("UTF-8"); 을 해야 한다.
				   주의할 것은 request.getParameter("변수명"); 보다 먼저 기술을 해주어야 한다는 것이다.      
			- 넘어온 데이터 조작해서 결과물 나타내고자 할 때 쓰는 것 : HttpServletResponse response
			- 필기구 쓰는 것, 쓰는 애(리턴타입은 PrintWriter) : PrintWriter out = response.getWriter();
				- out : 웹브라우저에 기술하는 대상체			    	
		
		■ 03get_postMethodTest1.jsp
		♣ Get_postMethodTest3
			- String name = request.getParameter("name"); : input 태그의 name 값 의미. 웹에서 전송해준 값을 그대로 읽어 옴.
			- String[] foodArr = request.getParameterValues("food"); : 복수개 배열은 이렇게
			- request.getMethod(); : 전송방식을 알아오는 것.(GET/POST)
			
		■ 04get_postMethodTest1.jsp
		♣ Get_postMethodTest4
			- response.getWriter().append("Served at: ").append(request.getContextPath());
			   웹브라우저에 아래와 같이 써주겠다는 말이다. 
			  Served at: /MyMVC
			- 확장자가 .java와 .xml은 web에서 경로를 알려줄 때 앞에 / 슬래시를 붙이면 앞에  ContextName  /MyMVC가 생략되어있음.
			    확장자가 .jsp와 .html은 반드시 ContextName   /MyMVC를 꼭 써줘야 함.  
			    
			    
	chap03
	-------------------------------------------------------------	
		■ personInterest.jsp : 개인성향 선택 페이지		    
		■ personInterestResult.jsp : 개인성향 결과 페이지	
			- Object obj = request.getAttribute("map"); : request 영역에서 key값("map")만 가져오겠다.
		♣ PersonInterestResult.java	
			- request는 저장소 기능도 가짐 : request.setAttribute("map",map); // (key값, value값)
				- request 저장영역에 데이터 map을 "map"이라느 키이름으로 저장해둠.
			- ☆★  MVC ☆★
				M->Model단(DB와 관련도니 업무를 처리해주는 곳->DAO클래스,DTO클래스)
				V->View단(결과물을 보여주는 곳->.jsp)	
				C->Controller단(서블릿클래스 .java)
				M "데이터", 어떻게 보일지 조작하면 안됨.
				V "데이터가 사용자에게 보여지는 모습", 데이터를 품고 있을 필요 없음.
				C "어떻게 보일지 조작하는 부분", 남에게 보일 필요 없음.
			
			- ** View단(.jsp 파일) 지정하기
				- RequestDispatcher dispatcher = request.getRequestDispatcher("/01begin/chap03/personInterestResult.jsp");
					- 파라미터 패스가 경로를 알려달라는 뜻. 
				- dispatcher.forward(request, response);
					- forward 저장소에 있던 것을 넘겨주겠다는 뜻. /01begin/chap03/personInterestResult.jsp"에만 넘겨주겠다.
					- 뷰단을 알고 있는 dispatcher에 request,respons 넘겨주겠다.
				- 웹브라우저 상에서 URL 주소는 그대로 /personInterestResult.do 인데
		    	    웹브라우저 상에 보여지는 내용물은  "/01begin/chap03/personInterestResult.jsp"의 내용이 보여진다.
				

	chap04_StandardAction : 실행은 Test에서~
	-------------------------------------------------------------	
		■ 01includeContentTest.jsp : JSP 표준액션 중 include 	
			- 01includeContent의 내용을 불러오고 싶을 때 : 1. include 지시어 쓰기  2. jsp:include page=""
			- <jsp:include page="01includeContent.jsp"/>
		■ 01includeContent.jsp	: 현재시각 및 저작권+
		
		■ 02forwardCalcTest.jsp : JSP 표준액션 중 forward
			- frm.action = "02forwardCalc.jsp";
		■ 02forwardCalc.jsp
			- test에서 넘어온 값을 받자 :
				String firstNum = request.getParameter("firstNum");
				String secondNum = request.getParameter("secondNum");
			- request 내장객체 역할 :
				1. 클라이언트(02forwardCalcTest.jsp)가 보내온 데이터를 읽어들이는( request.getParameter("변수명"); ) 역할
	           	2. 저장소 기능( request.setAttribute("키", 저장할객체); )을 하는 역할
			- <jsp:forward page="02forwardCalcView.jsp"></jsp:forward>
		■ 02forwardCalcView.jsp : 계산된 결과값 보여주는 곳
			- <%= firstNum%> 부터 <%= secondNum %> 까지의 합은?<br/>
			- frm.method = "get"; : method를 명기하지 않으면 기본은 get
		
		■ 03forwardCalcTest_EL.jsp : JSP 표준액션 중 forward
			- frm.action = "03forwardCalc_EL.jsp";
		■ 03forwardCalc_EL.jsp
			- test에서 넘어온 값을 받자 :
				String firstNum = request.getParameter("firstNum");
				String secondNum = request.getParameter("secondNum");
			- request 내장객체 역할 :
				1. 클라이언트(02forwardCalcTest.jsp)가 보내온 데이터를 읽어들이는( request.getParameter("변수명"); ) 역할
	           	2. 저장소 기능( request.setAttribute("키", 저장할객체); )을 하는 역할
			- <jsp:forward page="02forwardCalcView.jsp"></jsp:forward>
		■ 03forwardCalcView_EL.jsp : 계산된 결과값 보여주는 곳
			- <%= firstNum%> 부터 <%= secondNum %> 까지의 합은?<br/>
			- frm.method = "get"; : method를 명기하지 않으면 기본은 get
			- requestScopt : request저장소
			
		■ 04useBean.jsp : JSP 표준액션 중 useBean / 스크립틀릿을 사용하여 MemberDTO 클래스의 객체정보를 불러오기
				- <jsp:useBean id="mbrdto2" class="begin.chap04_StandardAction.MemberDTO" /> 
					- bean : 클래스 객체 // 클래스는 위에 적혀있는 class 복붙
				  <jsp:setProperty property="name" name="mbrdto2" value="엄정화"/>
					- property에 set 다음에 나온 이름을 적는 것! 첫글자는 무조건 소문자(법칙)
					
		■ 05formUseBean.jsp : form 태그를 사용한 데이터 전송 시 useBean 사용하기
		■ 05formUseBeanEnd.jsp	
			- 1. 객체만들기(DTO) / 기본생성자로 객체 만듦 : <jsp:useBean id="user" class="begin.chap04_StandardAction.UserDTO"/>
			- 2. param.name값(UserDTO) 적기 : <jsp:setProperty property="userid" name="user" value="${param.userid}"/>
				

	chap05_exception 
	-------------------------------------------------------------	
		- <script> ... function goSubmit(){ ... 으로 시작하는 듯.
	
		■ 01numberinputTest.jsp : JSP 페이지에서 Exception 처리 방법 3가지	
			1. try ~ catch ==> RequestDispatcher 를 이용한 에러페이지 출력
				■ 02tryCatchRequestDispatcher.jsp
					- test에서 넘어온 값을 받자 :
						String num1 = request.getParameter("num1");
						String num2 = request.getParameter("num2");
					- 숫자로 변환하자 : int nNum1 = Integer.parseInt(num1);
					- try-catch(NumberFormatException e)로 받아서
						- NumberFormatException 이라는 익셉션이 발생하면  에러표시를 해주는 특정 페이지로 이동시킴.
		      			   웹브라우저의 주소창의 URL주소는 안 바뀌고 그 내용만 03error1.jsp 의 내용이 보여진다. 
					- 파라미터 패스가 경로를 알려달라 : RequestDispatcher dispatcher = request.getRequestDispatcher("03error1.jsp");
					  forward 저장소에 있던 것을 넘겨주겠다 : dispatcher.forward(request, response);
				■ 03error1.jsp : 에러페이지 내용 만들기
						  
			2. JSP 페이지 directive(지시어)에서 errorPage 속성과 isErrorPage 속성을 이용한 에러페이지 출력
				■ 04directiveErrorPage.jsp : NumberFormatException 페이지 내용 만들기
					- test에서 넘어온 값을 받자 :
						String num1 = request.getParameter("num1");
						String num2 = request.getParameter("num2");
			3. 배치서술자인 web.xml을 이용한 에러페이지 출력
				■ 06webXml.jsp : NumberFormatException 처리는 배치서술자인 web.xml 에서 처리를 하도록 하겠다.
		
		■ 07error3 :
			<%@ page language="java" contentType="text/html; charset=UTF-8"
				pageEncoding="UTF-8" isErrorPage="true" %>
    		- 페이지 directive(지시어)에서 isErrorPage="true" 의 의미는
			   이 페이지는 일반적인 JSP 페이지가 아니라 오류가 발생했을때 보여주는 페이지임을 나타내는 것이다.
		 	   선언했을때에만 내장객체 exception 을 사용할 수 있다.
		
	chap06_JSTL : 실행은 Test에서~
	-------------------------------------------------------------	
		■ 01Multiply.jsp : 두개의 수를 입력받아서 곱셈하기
			- type:reset에는 id 안써도 됨!
		■ 01MultiplyEnd.jsp : 
			- JSTL(JSP Standard Tag Library) 사용하기 : <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> - c : 커스텀을 뚯험.
			- 변수의 선언방법 : 	<c:set var="no1" value='${param.num1}'></c:set> <!-- C: 변수를 선언하겠다. --> - c: : 변수를 선언하겠다. // form에 넘어온 num1 값 읽고 no1 변수에 담자 // param : 파라미터 
							<c:set var="no2" value='${param.num2}'/><!-- form에서 넘어온 num1 값을 읽어오자! 그리고 그것을 no1변수에 담아두겠다. parm은 파라미터를 뜻함-->
							<c:set var="result" value="${no1*no2}"/>
		
		■ 02IfTest.jsp : 입력받은 두개의 문자열이 같은지 다른지 검사하기
		■ 02IfTestEnd.jsp -> if만 존재 else-if/else는 없음. 그래서 한번 더 반대되는 것을 적어야 함.
			- test의 조건식 : <c:if test="${param.first == param.second"}> 같은지 / 같지않은지
			- <c:if test="${!empty name}"> 변수name에 정보가 들어있는지 / 안들어있는지
				- !와 not은 동일
		
		■ 03Choose_substring_Test.jsp : 주민번호를 입력받아서 1,3(남자)/2,4(여자)로 나타내기
		■ 03Choose_substring_TestEnd.jsp : 
			- fn 함수 사용하기 : <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
		
		■ 04fnData.jsp :
		■ 04fnView.jsp : 함수(functions) taglib
			-   === 함수 태그(functions) === fn
				  JSTL은 EL에서 사용할 수 있는 함수 태그를 제공한다.
				 
				 -------------------------------------------------------------------------------------   
				     함수                                                   설명
				 -------------------------------------------------------------------------------------   
				  length(obj)                      obj가 Conllection인 경우 저장된 항목의 개수를, 문자인 경우 문자열의 길이를 반환
				  toUpperCase(str)                 str을 대문자로 변환
				  toLowerCase(str)                 str을 소문자로 변환
				  substring(str, idx1, idx2)       str.substring(idx1, idx2)의 결과를 반환, idx2가 -1일 경우 str.substring(idx1)과 동일
				  substringAfter(str1, str2)       str1에서 str1에 포함되어 있는 str2 이후의 문자열을 구함
				  substringBefore(str1, str2)      str1에서 str1에 포함되어 있는 str2 이전의 문자열을 구함
				  trim(str)                        str 좌우의 공백 문자를 제거 
				  replace(str, src, dest)          str에 있는 src를 dest로 변환
				  indexOf(str1, str2)              str1에서 str2가 위치한 인덱스를 구함
				  startsWith(str1, str2)           str1이 str2로 시작할 경우 true, 그렇지 않을 경우 false를 반환
				  endsWith(str1, str2)             str1이 str2로 끝나는 경우 true, 그렇지 안을 경우 false를 반환
				  contains(str1, str2)             st1이 str2를 포함하고 있을 경우 true를 반환
				  containsIgnoreCase(str1, str2)   대소문자 구분없이 str1이 str2를 포함하고 있을 경우 true를 반환
				  split(str1, str2)                str2로 명시한 글자를 기준으로 str1을 분리해서 배열로 반환 
				  join(array, str2)                array에 저장된 문자열을 합침, 각 문자열의 사이에는 str2가 붙음
				  
		■ 05ForEach.jsp : 반복문 연습
			- <c:forEach var='i' begin="1" end="6">
				<h${i}>반복문 연습</h${i}>
			  </c:forEach>
		
		■ 06FoEach2Data.jsp
			- 배열 :  String[] nameArr1 = {"a","b","c"...};
					request.setAttribute("nameArr", nameArr);
					String[] nameArr2 = {}  // nameArr2는 null이 아님
					String[] nameArr3 = null// nameArr3은 null임
		■ 06ForEach2View.jsp : 회원명단 출력하기(JSTL을 사용한 것)
			- ${empty nameArr2} : empty->null이거나 null이 아니지만 등록된 데이터가 없을 때 true -> 참이되려면 nameArr2은 null이든지, null은 아니지만 길이(크기)가 0인 경우
		
		■ 07ForEach2Data.jsp
		■ 07ForEach2View.jsp : 회원명단 출력하기(스크립틀릿을 사용한 것)
			- <% 자바코드 %> <% html코드 %> <% 자바코드 %> <% html코드 %>... 
		
		■ 08ForEach3Data2.jsp
			- 배열? : String members : "a,b,c,...";
					 request.setAttribute("members", members);
		■ 08ForEach3View.jsp : 회원명단 출력하기
		
		■ 09ForTokenData.jsp
		■ 09ForTokensView.jsp : 회원명단 출력하기
			- <c:forTokens var="name" items="${members}" delims=",">
				- ${members}은 하나의 문자열인데 구분자(,)를 사용하여 하나하나씩 잘라서 배열로 나타내어줌 
			- <c:forTokens var="friend" items="${friends }" delims=",/.">
				- ${friendss}은 하나의 문자열인데 구분자, 또는 . 또눈 /를 사용하여 하나하나씩 잘라서 배열로 나타내어줌 
		
		■ 10ForTokensData.jsp
		■ 10ForEachSumView.jsp : 문자열로 되어진 숫자를 누적한 결과값(자동형변환, 형변환) 나타내기 
			- 문자열로 되어진 숫자를 누적한 결과값(자동형변환) 나타내기(JSTL을 사용한 것 )
			- 문자열로 되어진 숫자를(정수로 형변환)하여 누적한 결과값 나타내기(JSTL을 사용한 것 )
				<fmt:parseNumber var="pointInt" value="${point}" integerOnly="true" /> - true는 정수 / flase는 실수 
				- frm:parseNumber : 문자열을 숫자형식으로 형변환 시키는 것
				- integerOnly="true" : 소수점은 절삭해버리고 정수만 취해오는 것( 정수만 취해온 값을 변수 pointInt에 넣어줌.)
			- forEach를 사용하면서 index번호를 나타내기
			- forEach를 사용하면서 index번호를 나타내기
		
		■ 11ForEachMoneyData.jsp
		■ 11ForEachMoneyView.jsp
			- 숫자 나오게 : <%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
			-  fmt 태그 : Formatting 태그로 포맷에 관련된 태그입니다. 참조사이트  https://sinna94.tistory.com/11
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		